/* GOOD CODE IS ITS OWN BEST DOCUMENTATION.AS YOU ARE ABOUT TO ADD COMMENT
     ASK YOURSELF <HOW CAN I IMPROVE THE CODE >
     SO THAT THIS COMMENT IS NOT NEEDED

     ## DEEP ##
*/
#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
// DON'T CONFUSE IN MY CODE

#define AGNI_MISSILE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define frf(i,a,b) for(auto i=a;i<b;i++)
#define ffrf(i,a,b) for(auto i=a;i<=b;i++)
#define frb(i,a,b) for(auto i=b-1;i>=a;i--)
#define PI 3.1415926535
typedef long long int lli;
#define pub push_back
#define pob pob_back
#define vec vector<int>
#define vect vector<lli>
#define sti set<int>
#define stl set<lli>
#define vfrf(it,v) for(auto it=v.begin();it!=v.end();it++)
#define bfeb(it,v) for(auto it=v.rbegin();it!=v.rend();it++)
#define mti multiset<int>
#define mtl multiset<lli>
#define mpi map<int,int>
#define mpl map<lli,lli>
#define par pair<int,int>
#define mod 1e9+7
vector<lli> Make_unique(vector<lli> vt)
{
    lli n;
    vector<lli> vt2;
    frf(i,0,n-1)
    {
        if(vt[i]!=vt[i+1])
        {
            vt2.pub(vt[i]);
        }
    }
    if(vt[n-1]!=vt[n-2])
    {
        vt2.pub(vt[n-1]);
    }
    else
    {
        vt2.pub(vt[n-2]);
    }
    return vt2;
}
vector<lli> Prime_factorization(lli n)
{
    vector<lli> prime_;
    while (n % 2 == 0) 
    { 
        prime_.pub(2);
        n = n/2; 
    } 

    for (lli i = 3; i <= sqrt(n); i = i + 2) 
    { 
        
        while (n % i == 0) 
        { 
            prime_.pub(i);
            n = n/i; 
        } 
    } 

    if (n > 2) 
    {
      prime_.pub(n);
    }
    return prime_;
}
void solve()
{
    
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("INPUT_.txt", "r", stdin);
    freopen("OUTPUT_.txt", "w", stdout);
    #endif   
    AGNI_MISSILE;
    int T;
    cin>>T;
    while(T--)
    {
        solve();
    }
    return 0;
}
